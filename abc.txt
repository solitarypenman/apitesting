type AuthPayload {
id: Int!
email: String!
roles: String!
}

type Doc {
id: Int!
title: String!
org: Org
uri: String!
identifier: String!
officialUri: String!
creator: String!
publisher: String!
version: String!
description: String!
language: String!
adoptionStatus: String!
frameworktype: FrameworkType
note: String!
items: [Item]
}

type FrameworkType {
id: Int!
frameworkType: String!
docs: [Doc]
}

type Item {
id: Int!
doc: Doc
uri: String!
identifier: String!
fullStatement: String!
abbreviatedStatement: String!
conceptKeywords: String!
language: String!
notes: String!
}

input LoginInput {
email: String!
password: String!
}

type Mutation {
signup(signUpInput: SignUpInput): AuthPayload!
login(loginInput: LoginInput): AuthPayload!
}

type Org {
id: Int!
name: String
users: [User]
}

type Query {
docs: [Doc]
doc: Doc
items: [Item]
org: Org
users: [User]
user: User
}

input SignUpInput {
email: String!
password: String!
}

type User {
id: Int!
username: String
org: Org
}